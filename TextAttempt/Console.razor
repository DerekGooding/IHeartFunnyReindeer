@inject IJSRuntime JSRuntime
@using System.Timers
@using IHeartFunnyReindeer.Model
@using IHeartFunnyReindeer.Services

<div id="splash-screen" class="splash-screen">
    <h1>IHeartFunnyReindeer</h1>
</div>

<div id="main-content" class="console-container">
@*     <div id="glitchText">Glitching Text!</div>
    <div id="scrambleText">Original Text</div>
    <div id="distortionText">Distorted Text</div>
    <div id="hackingText" class="hacking-sequence">Initializing...</div> *@
    <div class="console-output" @ref="consoleOutputRef">
        @foreach (var line in ConsoleService.ColoredLines)
        {
            <div class="console-line">
                @foreach (var segment in line)
                {
                    <span style="color: @segment.Color" class="@GetEffectClass(segment.EffectType)">
                        @segment.Text
                    </span>
                }
            </div>
        }
    </div>
    <input @bind="ConsoleService.UserInput" @bind:event="oninput" @onkeydown="HandleKeyDown" 
    placeholder="Enter command..." class="console-input" />
</div>



@code {
    [Inject]
    private ConsoleService ConsoleService { get; set; }

    [Inject]
    private ColorService ColorService { get; set; }

    public Console(ConsoleService consoleService, ColorService colorService)
    {
        ConsoleService = consoleService;
        ColorService = colorService;
    }

    private ElementReference consoleOutputRef;

    private string GetEffectClass(EffectType effectType)
    {
        return effectType switch
        {
            EffectType.Glitched => "glitch",
            EffectType.Scrambled => "scrambled",
            EffectType.Distorted => "distortion-wave",
            _ => string.Empty
        };
    }

    private async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ConsoleService?.ProcessInput();

            if(ConsoleService?.Shake == true)
                await TriggerShakeAsync();

            await TriggerGlitchEffectAsync("glitchText");
            await TriggerScrambleEffectAsync("scrambleText", "Final Text");
            await TriggerDistortionWaveAsync("distortionText");

            await TriggerHackingSequenceAsync("hackingText", "ACCESS GRANTED");

        }
    }

    private async Task TriggerGlitchEffectAsync(string elementId) 
    => await JSRuntime.InvokeVoidAsync("addTemporaryClass", elementId, "glitch", 500);

    private async Task TriggerScrambleEffectAsync(string elementId, string finalText) 
    => await JSRuntime.InvokeVoidAsync("scrambleText", elementId, finalText);

    private async Task TriggerDistortionWaveAsync(string elementId) 
    => await JSRuntime.InvokeVoidAsync("applyDistortionWave", elementId);

    private async Task TriggerShakeAsync() => await JSRuntime.InvokeVoidAsync("shakeElement", consoleOutputRef);

    private async Task ScrollToBottomAsync() => await JSRuntime.InvokeVoidAsync("scrollToBottom", consoleOutputRef);

    private async Task TriggerHackingSequenceAsync(string elementId, string finalText) 
    => await JSRuntime.InvokeVoidAsync("hackingSequence", elementId, finalText, 2000);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("fadeOutSplash");
        }
    }
}